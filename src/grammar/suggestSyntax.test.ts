import {suggestSyntax} from './suggestSyntax';
import {PredicateSyntax} from '../PredicateSyntax';
import {allTenses} from '../util/tense';
import {deepCompare} from '../util/deepCompare'


describe.each([
  [
    {verb:'live', params: ['subject', 'in']},
    ['you', 'a house'],
  ],
  [
    {verb: 'chase', params: ['subject', 'object']},
    ['the cat', 'the dog']
  ],
  [
    {verb: 'seduce', params: ['subject', 'object', 'under']},
    ['the priest', 'the pope', 'a starry sky']
  ],
  [
    {verb: 'eat', params: ['subject', 'object']},
    ['the man', 'the bean'],
  ],
])('Testing suggestSyntax with strings generated by %o', ({verb, params}:any, args:string[]) => {
  const P = new PredicateSyntax(verb, params);
  const table = allTenses.map(tense => [tense, P.str(args, {tense})]);

  test.each(table)(`%s: Determining syntax of "%s"`, async (tense, str) => {
    let foundMatch = false;
    let numberOfMatches = 0;
    for await(let suggestion of suggestSyntax(str)) {
      numberOfMatches++;
      if(suggestion.verb == verb && deepCompare(suggestion.params, params))
        foundMatch = true;
    }
    expect(numberOfMatches).toBeGreaterThanOrEqual(1);
    expect(foundMatch).toBe(true);
  });
});
